/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
   
    public int diameterOfBinaryTree(TreeNode root) {
        int [] diameter = new int [1];
        height(root,diameter);
        return diameter[0];
    }
    public int height(TreeNode n, int []arr){
        if(n==null){
            return 0;
        }
        int left = height(n.left,arr);
        int right= height(n.right,arr);
        //we update the diameter everytime 
        //this is the only difference in our height code and this code 
        arr[0] = Math.max(left+right,arr[0]);
        //we return the maximum height of the current node 
        return 1 + Math.max(left, right);
    }
}
