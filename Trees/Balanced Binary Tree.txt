/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public boolean isBalanced(TreeNode root) {
        // if root is null it is already balanced
        if(root==null) return true;
        // if both the left and right child are null 
        // we only have the root ,so its balanced only 
        if(root.left==null && root.right==null) return true ;
        // now we calculate the difference between left subtree and right subtree
        int diff = Math.abs(height(root.left)-height(root.right));
        // if the differene is greater than 1 then we return false 
        if(diff>1) return false;
        // its important to check the balance of every node of the tree
        return isBalanced(root.left) && isBalanced(root.right);
    }

    // standard method to return height of the tree
    public int height(TreeNode root){
        if(root==null)return 0;
        int left = height(root.left);
        int right = height(root.right);
        return 1+Math.max(left,right);
    }
}
