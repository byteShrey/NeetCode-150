class Solution {
    public int carFleet(int target, int[] position, int[] speed) {
        // pair position and speeds in 2D array ;
        // sort the postions in descending order 
        // use stack of double to store the time 
        // if stack is empty or  the time > than stack ka peek then push 
        // return size of the stack
        int n = position.length ;
        double [][] cars = new double[n][2];
        for(int i=0 ;i<n ;i++){
            cars[i][0] = position[i];
            cars[i][1] = speed[i];
        }
        Arrays.sort(cars,(a,b)->Double.compare(b[0],a[0]));

        Stack<Double> stack = new Stack<>();

        for(int i =0 ;i<n ;i++){
            double time = (target - cars[i][0]) /cars[i][1];
            if(stack.isEmpty()|| time>stack.peek()){
                stack.push(time);
            }
        }
        return stack.size();
    }
}
