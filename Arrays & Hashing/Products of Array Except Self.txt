class Solution {

// we keep track of left multiplication of each index 
// and right multiplication of each index 
// and at the end for that index - if multiple left multiplication of that index and right multiplication of that index , we would have multiplication except that index 


    public int[] productExceptSelf(int[] nums) {
     	int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int[] result = new int[n];
        
        // Compute the left products.
        left[0] = 1; // There is no element to the left of index 0.
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        
        // Compute the right products.
        right[n - 1] = 1; // There is no element to the right of the last index.
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        
        // Build the result by multiplying left and right products.
        for (int i = 0; i < n; i++) {
            result[i] = left[i] * right[i];
        }
        
        return result;
}  
}