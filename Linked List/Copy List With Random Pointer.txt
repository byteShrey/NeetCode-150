/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
         // Step 1: Create a dummy head node for the new copied linked list.
        Node head2 = new Node(0);
        // `temp1` traverses the original list.
        Node temp1 = head;
        // `temp2` builds the new list starting from the dummy node.
        Node temp2 = head2;
        
        // Step 2: Copy the values and `next` pointers from the original list to the new list.
        while (temp1 != null) {
            // Create a new node with the same value as `temp1`.
            Node t = new Node(temp1.val);
            // Link the new node to the new list.
            temp2.next = t;
            // Move `temp2` to the newly created node.
            temp2 = t;
            // Move `temp1` to the next node in the original list.
            temp1 = temp1.next;
        }
        // Adjust `head2` to point to the actual start of the copied list.
        head2 = head2.next;

        // Reset `temp1` to the start of the original list.
        temp1 = head;
        // Reset `temp2` to the start of the copied list.
        temp2 = head2;

        // Step 3: Alternate the original and copied nodes in one combined list.
        Node temp = new Node(0); // Temporary pointer for alternating assignment.
        while (temp1 != null) {
            // Link the temporary node to the current node of the original list.
            temp.next = temp1;
            // Move to the next node in the original list.
            temp1 = temp1.next;
            // Move `temp` to its next node.
            temp = temp.next;

            // Link the temporary node to the current node of the copied list.
            temp.next = temp2;
            // Move to the next node in the copied list.
            temp2 = temp2.next;
            // Move `temp` to its next node.
            temp = temp.next;
        }

        // Reset pointers for both lists.
        temp1 = head;
        temp2 = head2;

        // Step 4: Assign the `random` pointers in the copied list.
        while (temp1 != null) {
            if (temp1.random == null) {
                // If the `random` pointer in the original list is null, set it to null in the copied list.
                temp2.random = null;
            } else {
                // Otherwise, set the `random` pointer in the copied list to the corresponding node.
                temp2.random = temp1.random.next;
            }

            // Move `temp1` and `temp2` to their respective `next` nodes.
            temp1 = temp2.next;
            if (temp1 != null) temp2 = temp1.next;
        }

        // Step 5: Separate the combined list back into two lists: the original and the copied list.
        temp1 = head;
        temp2 = head2;
        while (temp1 != null) {
            // Restore the `next` pointer of the original list.
            temp1.next = temp2.next;
            temp1 = temp1.next;
            if (temp1 == null) break;
            // Restore the `next` pointer of the copied list.
            temp2.next = temp1.next;
            if (temp2.next == null) break;
            temp2 = temp2.next;
        }

        // Return the head of the copied list.
        return head2;
    }
}
